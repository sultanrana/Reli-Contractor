type CustomerDataInMessageRoomType = {
    ID: String,
    Image: String,
    IsTyping: Boolean,
    FCM: String
}

type ContractorDataInMessageRoomType = {
    ID: String,
    Image: String,
    IsTyping: Boolean,
    FCM: String,
    UserType: String,       //Admin or Standard Contractor
}

type MessageType = {
    Milliseconds: Number,   //Using moment().valueOf()
    SenderID: String,       //User ID
    ReceiverID: String,     //User ID
    SYSTEM: Boolean,        //(TRUE, FALSE) -> Whether the messages are generated by system
    Shown: Boolean,         //TRUE BY DEFAULT
    DateTime: Date,         //Using new Date()
    Body: String,           //Actual Message
}

type MessageRoomType = {
    Created: Date,          //Using new Date()
    Expired: Boolean,       //FALSE BY DEFAULT
    ID: String,             //ROOM ID -> ORDER ID IN THIS CASE
    ProjectID: String,        //ORDER ID
    Customer: CustomerDataInMessageRoomType,
    Contractor: ContractorDataInMessageRoomType,
    Messages: Array<MessageType>
}


// Demo Message Room
const NewMessageRoom: MessageRoomType = {
    Created: new Date(),
    Expired: false,
    ProjectID: '',
    ID: '',
    Messages: [],
    Customer: {
        ID: '',
        Image: ''
    },
    Contractor: {
        ID: '',
        Image: '',
        UserType: ''
    }
}


export class Message {
    MessageDetails: MessageType

    constructor(Message: MessageType) {
        this.MessageDetails = Message
    }

    isSentByMe = (myID: String): Boolean => {
        return (this.MessageDetails.SenderID === myID)
    }
}

export class MessageRoom {
    MessageRoomDetails: MessageRoomType

    constructor(MessageRoomResponse: MessageRoomType) {
        if (MessageRoomResponse) this.MessageRoomDetails = MessageRoomResponse
        else this.MessageRoomDetails = NewMessageRoom
    }
}